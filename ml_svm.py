# -*- coding: utf-8 -*-
"""ML_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xa88GcUIDKDUFGXIkLbVu6ynsc8qj0nT
"""

import numpy as np
import pandas as pd
import scipy.io as sio
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn import svm
import os,time
from sklearn.multiclass import  OneVsRestClassifier
from sklearn.metrics import accuracy_score

hyp_data = sio.loadmat("/content/sample_data/Indian_pines_corrected.mat")
gt_data = sio.loadmat("/content/sample_data/Indian_pines_gt.mat")

data = hyp_data[sorted(hyp_data.keys())[-1]]

def applyPCA(X, n_components=30, seed=1):
    newX = np.reshape(X, (-1, X.shape[2]))
    pca = PCA(n_components=n_components, whiten=True, random_state=seed)
    newX = pca.fit_transform(newX)
    newX = np.reshape(newX, (X.shape[0], X.shape[1], n_components))
    return newX

data.shape

data = applyPCA(data)
data.shape

labels = gt_data[sorted(gt_data.keys())[-1]]

print(data.shape)
print(labels.shape)

data = data.reshape(data.shape[0]*data.shape[1],data.shape[2])
data.shape

labels = labels.reshape(-1,1)
labels.shape

unique, counts = np.unique(labels, return_counts=True)

print(unique,counts)

count_sort_ind = np.argsort(-counts)
print(unique[count_sort_ind])
counts[count_sort_ind]

data.shape

combine = np.concatenate((data,labels),axis=1)
combine

combine = np.delete(combine,np.where(combine[:,-1]==0),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==1),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==2),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==4),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==5),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==7),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==8),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==9),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==11),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==12),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==13),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==15),axis=0)
combine = np.delete(combine,np.where(combine[:,-1]==16),axis=0)

combine.shape

df = pd.DataFrame(combine)

df

data = np.array(combine)[:,:-1]
labels = np.array(combine)[:,-1]

print(data.shape)
print(labels.shape)

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.3, random_state=42)

C_values = [0.1, 1, 10, 100]
kernel_type = ['linear','poly','rbf']
accuracy = []

for kernel in kernel_type:
  for C in C_values:
      # Initialize SVM classifier with current C value
      svm = SVC(kernel=kernel, C=C)

      start_time1 = time.time()
      svm_ovr = OneVsRestClassifier(svm).fit(X_train, y_train)
      Time_taken_ovr = time.time() - start_time1
      y_test_ovr = svm_ovr.predict(X_test)

      acc_ovr = accuracy_score(y_test, y_test_ovr)
      accuracy.append(acc_ovr)

      
      # # Train SVM classifier
      # svm.fit(X_train, y_train)
      
      # # Get number of support vectors
      # n_support_vectors = svm.n_support_
      
      # # Print number of support vectors for current C value
      # print(f"C = {C}: Number of support vectors = {sum(n_support_vectors)}")

print(accuracy)